<Sql TableName="Create_v_MRPResultQuery" SqlScriptPriority="2" CustomScript="#CDATA">
    <CDATA name="CustomScript"><![CDATA[IF EXISTS
(
	SELECT *
	FROM SYS.views
	WHERE name = 'v_MRPResultQuery' AND SCHEMA_ID = SCHEMA_ID('dbo')
)
DROP VIEW [dbo].[v_MRPResultQuery]	
GO
CREATE VIEW v_MRPResultQuery AS
WITH FirstRecordTmpTable AS (
	SELECT CompanyID, SKU, Warehouse,MIN(Date) AS FirstRecordTime
	FROM LUMMRPProcessResult
	GROUP BY CompanyID, SKU, Warehouse
),
LastRecordTmpTable AS (
	SELECT CompanyID, SKU, Warehouse,MAX(Date) AS LastRecordTime
	FROM LUMMRPProcessResult
	GROUP BY CompanyID, SKU, Warehouse
),
BaseInfo AS (
	SELECT CompanyID,Revision, MAX(CreatedDatetime) AS CreatedDatetime,MAX(CreatedByID) AS CreatedByID
	FROM LUMMRPProcessResult
	GROUP BY CompanyID, Revision
),
MRPResult AS (
	SELECT item.InventoryCD AS InventoryItemCD,
		   comp.CompanyCD AS CompanyCD,
		   address.CountryID AS AddressCountry,
		   insite.SiteCD  AS SiteCD,
		   result.*,
		   base.revision AS BaseRevision,
		   base.CreatedByID AS BaseCreatedByID,
		   base.CreatedDatetime AS BaseCreatedDatetime
	FROM LUMMRPProcessResult result
	INNER JOIN Company comp  ON result.CompanyID = comp.CompanyID
	INNER JOIN INSite insite ON result.CompanyID = insite.CompanyID
							AND result.Warehouse = insite.SiteID
	INNER JOIN InventoryItem item ON result.CompanyID = item.CompanyID
								 AND result.SKU = item.InventoryID
	INNER JOIN Address address ON insite.CompanyID = address.CompanyID
							  AND insite.AddressID = address.AddressID
    LEFT JOIN BaseInfo base ON comp.CompanyID = base.CompanyID
)
-- Forecast
SELECT MRPType,
	   item.InventoryCD AS SKU,
	   comp.CompanyCD AS Company,
	   address.CountryID AS Country,
	   insite.SiteCD  AS Warehouse,
	   Date,
	   Qty,
	   Qty AS QtyWeek,
	   Qty AS QtyMonth,
	   base.revision,
	   base.CreatedByID,
	   base.CreatedDatetime,
	   'Y' AS TransactionExistsFlag
FROM LUMForecastUpload forecast
INNER JOIN Company comp  ON forecast.Company = comp.CompanyCD
INNER JOIN INSite insite ON comp.CompanyID = insite.CompanyID
						AND forecast.Warehouse = insite.SiteCD
INNER JOIN InventoryItem item ON comp.CompanyID = item.CompanyID
							 AND forecast.SKU = item.InventoryCD
INNER JOIN Address address ON insite.CompanyID = address.CompanyID
						  AND insite.AddressID = address.AddressID
LEFT JOIN BaseInfo base ON comp.CompanyID = base.CompanyID
WHERE comp.CompanyID > 0
-- MRP Result (Open SO Date-1)
UNION
SELECT 'Back SO' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   Date,
	   PastOpenSo AS Qty,
	   PastOpenSo AS QtyWeek,
	   PastOpenSo AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
WHERE result.PastOpenSo is not null and result.CompanyID > 0
-- MRP Result (Open SO)
UNION
SELECT 'Open SO' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   Date,
	   OpenSo AS Qty,
	   OpenSo AS QtyWeek,
	   OpenSo AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
WHERE result.OpenSo is not null and result.CompanyID > 0
-- MRP Result (Forecast Initial)
UNION
SELECT 'Forecast Initial' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   result.Date AS Date,
	   ForecastIntial AS Qty,
	   CASE 
		WHEN tmp.FirstRecordTime IS NOT NULL THEN ForecastIntial
		WHEN tmp.FirstRecordTime IS NULL AND DatePart(WeekDay,result.Date)-1 = 0 THEN ForecastIntial
		WHEN forecast.MRPType IS NOT NULL THEN forecast.Qty
	   ELSE null END AS QtyWeek,
	   CASE
		WHEN tmp.FirstRecordTime IS NOT NULL THEN ForecastIntial
		WHEN tmp.FirstRecordTime IS NULL AND CAST(result.DATE AS Date) = CAST(DATEADD(MM,DATEDIFF(MM, 0, result.Date),0) AS Date) THEN ForecastIntial
		WHEN forecast.MRPType IS NOT NULL THEN forecast.Qty
	   ELSE null END AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
LEFT JOIN FirstRecordTmpTable tmp ON result.CompanyID = tmp.CompanyID
							     AND result.Sku = tmp.Sku
								 AND result.Warehouse = tmp.Warehouse
								 AND result.Date = tmp.FirstRecordTime
LEFT JOIN LUMForecastUpload forecast ON result.CompanyCD = forecast.Company
								    AND result.InventoryItemCD = forecast.SKU
									AND result.SiteCD = forecast.Warehouse
									AND result.Date = forecast.Date
WHERE result.ForecastIntial is not null and result.CompanyID > 0
-- MRP Result (SotckInitial)
UNION
SELECT 'Stock Initial' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   Date,
	   StockInitial AS Qty,
	   CASE 
		WHEN tmp.FirstRecordTime IS NOT NULL THEN StockInitial
		WHEN tmp.FirstRecordTime IS NULL AND DatePart(WeekDay,Date)-1 = 0 THEN StockInitial
	   ELSE null END AS QtyWeek,
	   CASE
		WHEN tmp.FirstRecordTime IS NOT NULL THEN StockInitial
		WHEN tmp.FirstRecordTime IS NULL AND CAST(result.DATE AS Date) = CAST(DATEADD(MM,DATEDIFF(MM, 0, result.Date),0) AS Date) THEN StockInitial
	   ELSE null END AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
LEFT JOIN FirstRecordTmpTable tmp ON result.CompanyID = tmp.CompanyID
							     AND result.Sku = tmp.Sku
								 AND result.Warehouse = tmp.Warehouse
								 AND result.Date = tmp.FirstRecordTime
WHERE result.StockInitial is not null and result.CompanyID > 0
-- MRP Result (Demand)
UNION
SELECT 'Net Sales Demand' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   Date,
	   NetDemand AS Qty,
	   NetDemand AS QtyWeek,
	   NetDemand AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
WHERE result.NetDemand is not null and result.CompanyID > 0
-- MRP Result (StockAva)
UNION
SELECT 'Stock Available' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   Date,
	   StockAva AS Qty,
	   CASE 
	    WHEN tmp.LastRecordTime IS NOT NULL THEN StockAva
		WHEN tmp.LastRecordTime IS NULL AND DatePart(WeekDay,Date)-1 = 6 THEN StockInitial
	   ELSE null END AS QtyWeek,
	   CASE
	   WHEN tmp.LastRecordTime IS NOT NULL THEN StockAva
		WHEN tmp.LastRecordTime IS NULL AND CAST(result.DATE AS Date) = CAST(DATEADD(MM,DATEDIFF(MM, -1, result.Date),-1) AS Date) THEN StockInitial
	   ELSE null END AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
LEFT JOIN LastRecordTmpTable tmp ON result.CompanyID = tmp.CompanyID
							     AND result.Sku = tmp.Sku
								 AND result.Warehouse = tmp.Warehouse
								 AND result.Date = tmp.LastRecordTime
WHERE result.StockAva is not null and result.CompanyID > 0
-- MRP Result (Safety Stock)
UNION
SELECT 'Safety Stock' AS MRPType,
	   result.InventoryItemCD AS Sku,
	   result.CompanyCD AS Company,
	   result.AddressCountry AS Country,
	   result.SiteCD AS Warehouse,
	   Date,
	   SafetyStock AS Qty,
	   SafetyStock AS QtyWeek,
	   SafetyStock AS QtyMonth,
	   result.BaseRevision AS Revision,
	   result.BaseCreatedByID AS CreatedByID,
	   result.BaseCreatedDatetime AS CreatedDatetime,
	   result.TransactionExistsFlag
FROM MRPResult result
WHERE result.SafetyStock is not null and result.CompanyID > 0
-- Inventory Allocate Details
UNION
SELECT LUMMRPPreference.GroupingType,
	   item.InventoryCD AS Sku,
	   comp.CompanyCD AS Company,
	   address.CountryID AS Country,
	   insite.SiteCD  AS Warehouse,
	   invDetails.Date,
	   invDetails.Qty,
	   invDetails.Qty AS QtyWeek,
	   invDetails.Qty AS QtyMonth,
	   base.revision,
	   base.CreatedByID,
	   base.CreatedDatetime,
	   'Y' AS TransactionExistsFlag
FROM v_InventoryAllocationDetais invDetails
INNER JOIN Company comp  ON invDetails.CompanyID = comp.CompanyID
INNER JOIN INSite insite ON invDetails.CompanyID = insite.CompanyID
						AND invDetails.SiteID = insite.SiteID
INNER JOIN InventoryItem item ON invDetails.CompanyID = item.CompanyID
							 AND invDetails.InventoryID = item.InventoryID
INNER JOIN LUMMRPPreference ON invDetails.CompanyID = LUMMRPPreference.CompanyID
						   AND LOWER(invDetails.AllocationType) = LOWER(LUMMRPPreference.AllocationType)
						   AND LUMMRPPreference.GroupingType is not null
						   AND LUMMRPPreference.GroupingType != ''
INNER JOIN Address address ON insite.CompanyID = address.CompanyID
						  AND insite.AddressID = address.AddressID
LEFT JOIN BaseInfo base ON comp.CompanyID = base.CompanyID
WHERE invDetails.CompanyID > 0]]></CDATA>
</Sql>